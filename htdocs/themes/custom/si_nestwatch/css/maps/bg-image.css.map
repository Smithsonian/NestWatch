{"version":3,"sources":["helpers/_text.scss","bg-image.css","bg-image.scss","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss"],"names":[],"mappings":"AAsIA;;EAEE;ACrIF,iCAAiC;ACgDjC;EFsDI,gBErDoC;EFsDpC,kBEtDoC;EACvC,kBAAiB;EACjB,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,0BAAmB;MAAnB,uBAAmB;UAAnB,oBAAmB;EACnB,mBAAkB,EAwClB;EDrFC,iCAAiC;ECwCnC;;;IASE,aAAY,EACZ;ED7CA,iCAAiC;ECmCnC;IAYE,4CAAuC,EACvC;ED7CA,iCAAiC;ECgCnC;IAgBE,WAAU,EAKV;IDlDE,iCAAiC;IC6BrC;;MAmBG,iBAAgB,EAChB;ED7CD,iCAAiC;ECyBnC;IAyBG,gCAA+B;IAAE,sBAAsB;IACvD,wBAAuB;IACvB,aACD,EAAC;ED/CD,iCAAiC;ECmBnC;;IAgCE,mBAAkB;IAClB,OAAM;IACN,QAAO;IACP,SAAQ;IACR,UAAS;IACT,WAAU,EACV;EDhDA,iCAAiC;ECUnC;IAwCE,WAAU,EACV;EC5BE;IFnBA,iCAAiC;ICMrC;MA2CE,kBAAiB,EAElB,EAAA","file":"../bg-image.css","sourcesContent":["// Text overflow\n// Requires inline-block or block for proper styling\n@mixin text-overflow() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n// [converter] $parent hack\n@mixin text-emphasis-variant($parent, $color) {\n  #{$parent} {\n    color: $color;\n  }\n  a#{$parent}:hover {\n    color: darken($color, 10%);\n  }\n}\n\n@mixin letterpress($opacity){\n  // ($hoff, $voff, $blur, $spread, $color)\n  @include text-shadow(0, 1px, 0, 0, rgba(white, $opacity));\n}\n\n@mixin reset-text() {\n  font-family: $font;\n  // We deliberately do NOT reset font-size.\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: $line-height-base;\n  text-align: left; // Fallback for where `start` is not supported\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n}\n\n// Create REM values with PX fall back\n//\n// Generate a REM with PX fallback from\n// $baseFontSize. Enter the desired size based\n// on pixels in numerical form. Supports shorthand.\n//\n// Forked from: http://codepen.io/thejameskyle/pen/JmBjc\n//\n// @author Greg Rickaby\n// @since 1.0\n//\n// Usage: @include rem($property, $values);\n// Example Usage:\n//    @include rem(font-size, (16px);\n//    @include rem(margin, 0 24px 0 12px);\n//\n// Outputs:\n//    font-size: 16px;\n//    font-size: 1.6rem;\n//    margin: 0 24px 0 12px;\n//    margin: 0 2.4rem 0 1.2rem;\n// ----------------------------------\n\n@function parseInt($n) {\n  @return $n / ($n * 0 + 1);\n}\n\n@mixin rem($property, $values) {\n  $px : ();\n  $rem: ();\n\n  $root: $baseFontSize;\n\n  @each $value in $values {\n    @if $value == 0 or $value == auto {\n      $px : append($px , $value);\n      $rem: append($rem, $value);\n    }\n\n    @else if type-of($value) == number {\n      $unit: unit($value);\n      $val: parseInt($value);\n\n      @if $unit == \"px\" {\n        $px : append($px,  $value);\n        $rem: append($rem, ($val / $root + rem));\n      }\n\n      @if $unit == \"rem\" {\n        $px : append($px,  ($val * $root + px));\n        $rem: append($rem, $value);\n      }\n    }\n\n    @else {\n      $px : append($px,  $value);\n      $rem: append($rem, $value);\n    }\n  }\n\n  @if $px == $rem {\n    #{$property}: $px;\n  } @else {\n    #{$property}: $px;\n    #{$property}: $rem;\n  }\n}\n\n@function rem($value) {\n  $root: $baseFontSize;\n  $val: parseInt($value);\n  $return: ();\n\n  @if unit($value) == \"px\" {\n    $return: append($return, ($val / $root + rem));\n  } @else {\n    $return: append($return, ($val * $root + px));\n  }\n\n  @return $return;\n}\n\n@function em($pixels, $base: $font-size-base) {\n  @if $pixels == 0 {\n    @return 0;\n  }\n  @else {\n    @return ($pixels / $base) * 1em;\n  }\n}\n\n\n/* Rem Unit font sizes with relative fallback http:/seesparkbox.com/foundry/scss_rem_mixin_now_with_a_better_fallback\n\tUsage: @include font-size(1, large);\n*/\n@mixin font-size( $decimal-size, $keyword: null ) {\n  @if $keyword{ font-size: $keyword; }\n  @else { font-size: $decimal-size * $base-font-multiplier * 16px;}\n  font-size: $decimal-size * 1rem;\n}\n\n@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {\n  color: $normal;\n  @if $visited {\n    &:visited {\n      color: $visited;\n    }\n  }\n  @if $focus {\n    &:focus {\n      color: $focus;\n    }\n  }\n  @if $hover {\n    &:hover {\n      color: $hover;\n    }\n  }\n  @if $active {\n    &:active {\n      color: $active;\n    }\n  }\n}","/* Rem Unit font sizes with relative fallback http:/seesparkbox.com/foundry/scss_rem_mixin_now_with_a_better_fallback\n\tUsage: @include font-size(1, large);\n*/\n/* line 52, sass/bg-image.scss */\n.paragraph--type--bg-image {\n  padding: 36px 0;\n  padding: 3.6rem 0;\n  min-height: 325px;\n  display: flex;\n  align-items: center;\n  position: relative; }\n  /* line 58, sass/bg-image.scss */\n  .paragraph--type--bg-image *,\n  .paragraph--type--bg-image .h3,\n  .paragraph--type--bg-image .h4 {\n    color: white; }\n  /* line 63, sass/bg-image.scss */\n  .paragraph--type--bg-image * {\n    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3); }\n  /* line 67, sass/bg-image.scss */\n  .paragraph--type--bg-image > .content {\n    z-index: 5; }\n    /* line 69, sass/bg-image.scss */\n    .paragraph--type--bg-image > .content > .spacing,\n    .paragraph--type--bg-image > .content > .spacing-bottom {\n      margin-bottom: 0; }\n  /* line 76, sass/bg-image.scss */\n  .paragraph--type--bg-image.bg .bg-image {\n    -webkit-filter: grayscale(100%);\n    /* Safari 6.0 - 9.0 */\n    filter: grayscale(100%);\n    opacity: .75; }\n  /* line 82, sass/bg-image.scss */\n  .paragraph--type--bg-image .overlay,\n  .paragraph--type--bg-image .bg-image {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 1; }\n  /* line 91, sass/bg-image.scss */\n  .paragraph--type--bg-image .overlay {\n    z-index: 2; }\n  @media (min-width: 768px) {\n    /* line 52, sass/bg-image.scss */\n    .paragraph--type--bg-image {\n      min-height: 460px; } }\n","@import \"../node_modules/breakpoint-sass/stylesheets/breakpoint\";\n// Globbing will always import files alphabetically. Optimally, all your\n// components should be self-contained and explicit enough to not have any\n// contained styles leak into unrelated components: The import order should not\n// affect the result.\n//\n// If there are variables, functions or mixins that depend on each other and\n// therefore need to be imported in a specific order you can import them\n// directly. Variables-, function- or mixin providing partials should never\n// output any styles themselves: Importing them multiple times to resolve\n// dependencies shouldn't be a problem.\n@import \"variables/_1-base.scss\";\n@import \"variables/_2-font.scss\";\n@import \"variables/_3-layout.scss\";\n@import \"variables/_button.scss\";\n@import \"variables/_table.scss\";\n@import \"helpers/_background-variant.scss\";\n@import \"helpers/_background.scss\";\n@import \"helpers/_box-emboss.scss\";\n@import \"helpers/_box-sizing.scss\";\n@import \"helpers/_buttons.scss\";\n@import \"helpers/_center-block.scss\";\n@import \"helpers/_clearfix.scss\";\n@import \"helpers/_font-smooth.scss\";\n@import \"helpers/_font.scss\";\n@import \"helpers/_forms.scss\";\n@import \"helpers/_gradients.scss\";\n@import \"helpers/_hide-text.scss\";\n@import \"helpers/_icon.scss\";\n@import \"helpers/_image.scss\";\n@import \"helpers/_keyframe.scss\";\n@import \"helpers/_labels.scss\";\n@import \"helpers/_layout.scss\";\n@import \"helpers/_links.scss\";\n@import \"helpers/_list.scss\";\n@import \"helpers/_navigation.scss\";\n@import \"helpers/_opacity.scss\";\n@import \"helpers/_pagination.scss\";\n@import \"helpers/_panels.scss\";\n@import \"helpers/_preserve3d.scss\";\n@import \"helpers/_progress-bar.scss\";\n@import \"helpers/_reset-filter.scss\";\n@import \"helpers/_resize.scss\";\n@import \"helpers/_responsive-visibility.scss\";\n@import \"helpers/_sass-inline-svg-data.scss\";\n@import \"helpers/_sass-inline-svg.scss\";\n@import \"helpers/_size.scss\";\n@import \"helpers/_tab-focus.scss\";\n@import \"helpers/_table-row.scss\";\n@import \"helpers/_text.scss\";\n@import \"helpers/_vendor-prefixes.scss\";\n.paragraph--type--bg-image {\n\t@include rem(padding, $space-and-half 0);\n\tmin-height: 325px;\n\tdisplay: flex;\n\talign-items: center;\n\tposition: relative;\n\t*,\n\t.h3,\n\t.h4{\n\t\tcolor: white;\n\t}\n\t* {\n\t\ttext-shadow: 1px 1px 1px rgba(0,0,0,.3);\n\t}\n\n > .content {\n\t z-index: 5;\n\t > .spacing,\n\t > .spacing-bottom{\n\t\t margin-bottom: 0;\n\t }\n }\n\n\t&.bg {\n\t\t.bg-image {\n\t\t\t-webkit-filter: grayscale(100%); /* Safari 6.0 - 9.0 */\n\t\t\tfilter: grayscale(100%);\n\t\t\topacity: .75\n\t\t}\n\t}\n\t.overlay,\n\t.bg-image {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tz-index: 1;\n\t}\n\t.overlay {\n\t\tz-index: 2;\n\t}\n\t@include breakpoint($tab) {\n\t\tmin-height: 460px;\n\t}\n}","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n"]}